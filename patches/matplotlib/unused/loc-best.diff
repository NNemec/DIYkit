make "best" the default for loc argument in Legend

Index: matplotlib/lib/matplotlib/legend.py
===================================================================
--- matplotlib.orig/lib/matplotlib/legend.py	2007-07-05 15:28:17.000000000 +0200
+++ matplotlib/lib/matplotlib/legend.py	2007-07-05 15:30:33.000000000 +0200
@@ -75,8 +75,8 @@
 
     The location codes are
 
-      'best'         : 0,
-      'upper right'  : 1,  (default)
+      'best'         : 0,  (default)
+      'upper right'  : 1,
       'upper left'   : 2,
       'lower left'   : 3,
       'lower right'  : 4,
@@ -92,8 +92,8 @@
     """
 
 
-    codes = {'best'         : 0,
-             'upper right'  : 1,  # default
+    codes = {'best'         : 0,  # default
+             'upper right'  : 1,
              'upper left'   : 2,
              'lower left'   : 3,
              'lower right'  : 4,
@@ -108,14 +108,15 @@
 
 
     zorder = 5
-    def __init__(self, parent, handles, labels, loc,
-                 isaxes= None,
-                 numpoints = None,      # the number of points in the legend line
+    def __init__(self, parent, handles, labels,
+                 loc = 0,
+                 isaxes = None,
+                 numpoints = None,     # the number of points in the legend line
                  prop = None,
-                 pad = None,          # the fractional whitespace inside the legend border
-                 markerscale = None,    # the relative size of legend markers vs. original
+                 pad = None,           # the fractional whitespace inside the legend border
+                 markerscale = None,   # the relative size of legend markers vs. original
                  # the following dimensions are in axes coords
-                 labelsep = None,     # the vertical space between the legend entries
+                 labelsep = None,      # the vertical space between the legend entries
                  handlelen = None,     # the length of the legend lines
                  handletextsep = None, # the space between the legend line and legend text
                  axespad = None,       # the border between the axes and legend edge
@@ -141,9 +142,12 @@
   axespad = 0.02       # the border between the axes and legend edge
         """
         Artist.__init__(self)
-        if is_string_like(loc) and not self.codes.has_key(loc):
-            warnings.warn('Unrecognized location %s. Falling back on upper right; valid locations are\n%s\t' %(loc, '\n\t'.join(self.codes.keys())))
-        if is_string_like(loc): loc = self.codes.get(loc, 1)
+        if is_string_like(loc):
+            if not self.codes.has_key(loc):
+                warnings.warn('Unrecognized location %s. Falling back on "best"; '
+                              'valid locations are\n\t%s\n'
+                              % (loc, '\n\t'.join(self.codes.keys())))
+            loc = self.codes.get(loc, 0)
 
         proplist=[numpoints, pad, markerscale, labelsep, handlelen, handletextsep, axespad, shadow, isaxes]
         propnames=['numpoints', 'pad', 'markerscale', 'labelsep', 'handlelen', 'handletextsep', 'axespad', 'shadow', 'isaxes']
@@ -471,40 +475,31 @@
     def _loc_to_axes_coords(self, loc, width, height):
         """Convert a location code to axes coordinates.
 
-        - loc: a location code, which may be a pair of literal axes coords, or
-          in range(1, 11). This coresponds to the possible values for
-          self._loc, excluding "best".
+        - loc: a location code in range(1, 11).
+          This corresponds to the possible values for self._loc, excluding "best".
 
         - width, height: the final size of the legend, axes units.
         """
+        assert loc in range(1,11) # called only internally
+
         BEST, UR, UL, LL, LR, R, CL, CR, LC, UC, C = range(11)
 
-        left = self.axespad
-        right = 1.0 - (self.axespad + width)
-        upper = 1.0 - (self.axespad + height)
-        lower = self.axespad
-        centerx = 0.5 - (width/2.0)
-        centery = 0.5 - (height/2.0)
-
-        if loc == UR:
-            return right, upper
-        if loc == UL:
-            return left, upper
-        if loc == LL:
-            return left, lower
-        if loc == LR:
-            return right, lower
-        if loc == CL:
-            return left, centery
-        if loc in (CR, R):
-            return right, centery
-        if loc == LC:
-            return centerx, lower
-        if loc == UC:
-            return centerx, upper
-        if loc == C:
-            return centerx, centery
-        raise TypeError, "%r isn't an understood type code." % (loc,)
+        if loc in (UL, LL, CL):                # left
+            x = self.axespad
+        elif loc in (UR, LR, CR, R):           # right
+            x = 1.0 - (width + self.axespad)
+        elif loc in (LC, UC, C):               # center x
+            x = (0.5 - width/2.0)
+
+        if loc in (UR, UL, UC):                # upper
+            y = 1.0 - (height + self.axespad)
+        elif loc in (LL, LR, LC):              # lower
+            y = self.axespad
+        elif loc in (CL, CR, C, R):            # center y
+            y = (0.5 - height/2.0)
+
+        return x,y
+
 
     def _update_positions(self, renderer):
         # called from renderer to allow more precise estimates of
@@ -547,33 +542,21 @@
         l,b,w,h = bbox.get_bounds()
         self.legendPatch.set_bounds(l,b,w,h)
 
-        BEST, UR, UL, LL, LR, R, CL, CR, LC, UC, C = range(11)
         ox, oy = 0, 0                           # center
 
-
         if iterable(self._loc) and len(self._loc)==2:
             xo = self.legendPatch.get_x()
             yo = self.legendPatch.get_y()
             x, y = self._loc
-            ox = x-xo
-            oy = y-yo
-            self._offset(ox, oy)
+            ox, oy = x-xo, y-yo
+        elif self._loc == 0:  # "best"
+            ox, oy = self._find_best_position(w, h)
         else:
-            if self._loc in (BEST,):
-                ox, oy = self._find_best_position(w, h)
-            if self._loc in (UL, LL, CL):           # left
-                ox = self.axespad - l
-            if self._loc in (UR, LR, R, CR):  # right
-                ox = 1 - (l + w + self.axespad)
-            if self._loc in (UR, UL, UC):     # upper
-                oy = 1 - (b + h + self.axespad)
-            if self._loc in (LL, LR, LC):           # lower
-                oy = self.axespad - b
-            if self._loc in (LC, UC, C):            # center x
-                ox = (0.5-w/2)-l
-            if self._loc in (CL, CR, C):            # center y
-                oy = (0.5-h/2)-b
-            self._offset(ox, oy)
+            x, y = self._loc_to_axes_coords(self._loc, w, h)
+            ox, oy = x-l, y-b
+
+        self._offset(ox, oy)
+
 
 
 #artist.kwdocd['Legend'] = kwdoc(Legend)
Index: matplotlib/lib/matplotlib/axes.py
===================================================================
--- matplotlib.orig/lib/matplotlib/axes.py	2007-07-05 15:29:50.000000000 +0200
+++ matplotlib/lib/matplotlib/axes.py	2007-07-05 15:30:33.000000000 +0200
@@ -2901,8 +2901,8 @@
 
         The location codes are
 
-          'best' : 0,
-          'upper right'  : 1, (default)
+          'best'         : 0, (default)
+          'upper right'  : 1,
           'upper left'   : 2,
           'lower left'   : 3,
           'lower right'  : 4,
@@ -2940,7 +2940,6 @@
             handles.extend([c for c in self.collections if isinstance(c, RegularPolyCollection)])
             return handles
 
-
         if len(args)==0:
             handles = []; autohandles = []
             labels = [];  autolabels = []
@@ -2956,33 +2955,32 @@
             if len(labels) == 0:
                 handles = autohandles
                 labels = autolabels
-            loc = popd(kwargs, 'loc', 1)
 
         elif len(args)==1:
             # LABELS
             labels = args[0]
             handles = [h for h, label in zip(get_handles(), labels)]
-            loc = popd(kwargs, 'loc', 1)
 
         elif len(args)==2:
             if is_string_like(args[1]) or isinstance(args[1], int):
                 # LABELS, LOC
                 labels, loc = args
                 handles = [h for h, label in zip(get_handles(), labels)]
+                kwargs['loc'] = loc
             else:
                 # LINES, LABELS
                 handles, labels = args
-                loc = popd(kwargs, 'loc', 1)
 
         elif len(args)==3:
             # LINES, LABELS, LOC
             handles, labels, loc = args
+            kwargs['loc'] = loc
         else:
             raise TypeError('Invalid arguments to legend')
 
 
         handles = flatten(handles)
-        self.legend_ = Legend(self, handles, labels, loc, **kwargs)
+        self.legend_ = Legend(self, handles, labels, **kwargs)
         return self.legend_
 
 
Index: matplotlib/examples/legend_auto.py
===================================================================
--- matplotlib.orig/examples/legend_auto.py	2007-07-05 15:28:17.000000000 +0200
+++ matplotlib/examples/legend_auto.py	2007-07-05 15:30:33.000000000 +0200
@@ -17,35 +17,35 @@
     figure(1)
     t = arange(0, 40.0 * pi, 0.1)
     l, = plot(t, 100*sin(t), 'r', label='sine')
-    legend(loc='best')
+    legend()
 
 def fig_2():
     figure(2)
     plot(x, 'o', label='x=y')
-    legend(loc='best')
+    legend()
 
 def fig_3():
     figure(3)
     plot(x, -x, 'o', label='x= -y')
-    legend(loc='best')
+    legend()
 
 def fig_4():
     figure(4)
     plot(x, ones(len(x)), 'o', label='y=1')
     plot(x, -ones(len(x)), 'o', label='y=-1')
-    legend(loc='best')
+    legend()
 
 def fig_5():
     figure(5)
     n, bins, patches = hist(randn(1000), 40, normed=1)
     l, = plot(bins, normpdf(bins, 0.0, 1.0), 'r--', label='fit', linewidth=3)
-    legend([l, patches[0]], ['fit', 'hist'], loc='best')
+    legend([l, patches[0]], ['fit', 'hist'])
 
 def fig_6():
     figure(6)
     plot(x, 50-x, 'o', label='y=1')
     plot(x, x-50, 'o', label='y=-1')
-    legend(loc='best')
+    legend()
 
 def fig_7():
     figure(7)
@@ -53,19 +53,19 @@
     plot(xx, (xx*xx)-1225, 'bo', label='$y=x^2$')
     plot(xx, 25*xx, 'go', label='$y=25x$')
     plot(xx, -25*xx, 'mo', label='$y=-25x$')
-    legend(loc='best')
+    legend()
 
 def fig_8():
     figure(8)
     b1 = bar(x, x, color='m')
     b2 = bar(x, x[::-1], color='g')
-    legend([b1[0], b2[0]], ['up', 'down'], loc='best')
+    legend([b1[0], b2[0]], ['up', 'down'])
 
 def fig_9():
     figure(9)
     b1 = bar(x, -x)
     b2 = bar(x, -x[::-1], color='r')
-    legend([b1[0], b2[0]], ['down', 'up'], loc='best')
+    legend([b1[0], b2[0]], ['down', 'up'])
 
 def fig_10():
     figure(10)
@@ -74,8 +74,7 @@
     b3 = bar(x, -x, bottom=100)
     b4 = bar(x, -x[::-1], bottom=100, color='r')
     legend([b1[0], b2[0], b3[0], b4[0]], ['bottom right', 'bottom left',
-                                          'top left', 'top right'],
-           loc='best')
+                                          'top left', 'top right'])
 
 if __name__ == '__main__':
     nfigs = 10
