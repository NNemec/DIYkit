DIYkit -- $HOME improvements made easy...
=========================================

DIYkit is a lightweight package manager to cleanly install libraries
and tools into your $HOME directory. The repository contains a growing
list of packages that can easily be downloaded, compiled from source
and installed with a single command.

If you frequently work on Unix/Linux systems that you do not
administrate yourself, DIYkit is the solution to comfortably install
software into your $HOME directory:

-> A single directory (default: ~/.DIYkit/ ) contains all user-installed
libraries and programs.

-> The environment ($PATH etc.) is automatically configured to contain
all the relevant information to make the software accessible.

-> Each package in the repository consists of a simple bash script that
is short and clean for all standard cases (autoconf etc.) and flexible
enough for non-standard distribution formats.

-> Missing software packages can easily be added. Contributions welcome!


INITIAL SET-UP
==============

If git is available on your system, check out the DIYkit directory directly
into your $HOME directory:
    > git clone git://github.com/NNemec/DIYkit.git ~/.DIYkit

otherwise, unpack an initial version by using the conventional commands
    > cd ~
    > wget http://github.com/downloads/NNemec/DIYkit/DIYkit-20100823.tar.gz
    > tar xfz DIYkit-20100823.tar.gz
    > mv DIYkit/ ~/.DIYkit
    > rm DIYkit-20100823.tar.gz

Now, add the following line to your ~/.bashrc file:
    [ -d ~/.DIYkit ] && . ~/DIYkit/DIYkit.sh

Close the current shell and start a new one to activate the DIYkit
environment.


INSTALLING SOFTWARE
===================

The following actions can be performed anywhere from the command line:

View the available pre-configured packages:
   diy avail

Install a pre-configured package (e.g. NumPy) type:
   diy install numpy


ADDING NEW SOFTWARE PACKAGES
============================

Simply add a new *.diy file to the ~/.DIYkit/ directory. See the existing
packages for examples. Software using autoconf or similar standards
can be added with just a few lines. The files are plain bash scripts
flexible enough to accomodate arbitrarily non-standard installation
procedures.

The conventions for DIYkit packages are still evolving. Documentation is
on the way. For the moment: try to follow the example where possible and
feel free to improvise otherwise.

Contributions are welcome! Send me your public SSH key (~/.ssh/id_?sa.pub)
to obtain write access to the repository.


ADVANCED USAGE
==============

Temporary deactivation
----------------------

To deactivate DIYkit temporarily within a running shell, issue
    diy off
which will clear the current environment of all traces of DIYkit.


CONTACT THE AUTHOR
==================

Currently the DIYkit is in early development. If you want to use
it, I would be delighted to hear about your experience!

                                 Norbert Nemec <Norbert@Nemec-online.de>
